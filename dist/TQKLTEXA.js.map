{
  "version": 3,
  "sources": ["../modules/ws-inbound-firewall.ts"],
  "sourcesContent": ["import { environment, ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\ninterface TriggeredRule {\n  \"ruleId\": string\n  \"version\": string\n  \"tags\": string[]\n  \"message\": string\n  \"category\": string\n  \"riskScore\": number\n  \"details\": {\n    \"maskedInput\": string\n  },\n  \"action\": \"deny\" | \"warn\"\n  \"selector\": string\n}\n\ninterface AIFirewallResponse {\n  \"overallRiskScore\": number\n  \"rulesTriggered\": TriggeredRule[],\n  \"userApplicationId\": string,\n  \"clientRequestId\": string\n}\n\nasync function checkFirewallForAi(data: string, context: ZuploContext) {\n\n  const aiFirewallResponse = await fetch('https://aisec.akamai.com/fai/v1/fai-configurations/1129/detect', {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Fai-Api-Key\": environment.AI_FIREWALL_KEY\n    },\n    body: JSON.stringify({\n      \"clientRequestId\": crypto.randomUUID(),\n      \"llmInput\": data\n    })\n  })\n\n  const responseText = await aiFirewallResponse.text();\n  context.log.debug({\n    status: aiFirewallResponse.status,\n    statusText: aiFirewallResponse.statusText,\n    body: responseText\n  });\n\n  if (aiFirewallResponse.status !== 200) {\n    throw new Error(`AI Firewall request failed. Status: ${aiFirewallResponse.status}, status text: ${aiFirewallResponse.statusText}`);\n  }\n\n  const response: AIFirewallResponse = JSON.parse(responseText) as AIFirewallResponse;\n\n  return response;\n}\n\nexport async function inboundFirewallPolicy(\n  data: any,\n  target: WebSocket,\n  source: WebSocket,\n  request: ZuploRequest,\n  context: ZuploContext\n) {\n\n  try {\n    const result = await checkFirewallForAi(data, context);\n\n    const shouldDeny = result.rulesTriggered.filter(rule => rule.action === \"deny\");\n\n    if (shouldDeny.length === 0) {\n      return data;\n    }\n\n    source.send(`AI Firewall has denied forwarding this incoming message. ${shouldDeny[0].message} (Rule: ${shouldDeny[0].ruleId})`);\n    // you could also send something to the source (origin) here if you like\n    // returning undefined here stops the message sequence for this message\n    return;\n  }\n  catch (err) {\n    context.log.error(err);\n  }\n\n  // in case of error, just go ahead\n  return data;\n}\n\nexport async function outboundFirewallPolicy(\n  data: any,\n  target: WebSocket,\n  source: WebSocket,\n  request: ZuploRequest,\n  context: ZuploContext\n) {\n\n  // to test outbound interception you can \n  // data = \"532-90-8976\"\n\n  try {\n    const result = await checkFirewallForAi(data, context);\n\n    const shouldDeny = result.rulesTriggered.filter(rule => rule.action === \"deny\");\n\n    if (shouldDeny.length === 0) {\n      return data;\n    }\n\n    target.send(`AI Firewall has denied forwarding the outgoing message. ${shouldDeny[0].message} (Rule: ${shouldDeny[0].ruleId})`);\n    // you could also send something to the source (origin) here if you like\n    // returning undefined here stops the message sequence for this message\n    return;\n  }\n  catch (err) {\n    context.log.error(err);\n  }\n\n  // in case of error, don't block\n  return data;\n}"],
  "mappings": "kCAuBA,eAAeA,EAAmBC,EAAcC,EAAuB,CAErE,IAAMC,EAAqB,MAAM,MAAM,iEAAkE,CACvG,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAeC,EAAY,eAC7B,EACA,KAAM,KAAK,UAAU,CACnB,gBAAmB,OAAO,WAAW,EACrC,SAAYH,CACd,CAAC,CACH,CAAC,EAEKI,EAAe,MAAMF,EAAmB,KAAK,EAOnD,GANAD,EAAQ,IAAI,MAAM,CAChB,OAAQC,EAAmB,OAC3B,WAAYA,EAAmB,WAC/B,KAAME,CACR,CAAC,EAEGF,EAAmB,SAAW,IAChC,MAAM,IAAI,MAAM,uCAAuCA,EAAmB,MAAM,kBAAkBA,EAAmB,UAAU,EAAE,EAKnI,OAFqC,KAAK,MAAME,CAAY,CAG9D,CAEA,eAAsBC,EACpBL,EACAM,EACAC,EACAC,EACAP,EACA,CAEA,GAAI,CAGF,IAAMQ,GAFS,MAAMV,EAAmBC,EAAMC,CAAO,GAE3B,eAAe,OAAOS,GAAQA,EAAK,SAAW,MAAM,EAE9E,GAAID,EAAW,SAAW,EACxB,OAAOT,EAGTO,EAAO,KAAK,4DAA4DE,EAAW,CAAC,EAAE,OAAO,WAAWA,EAAW,CAAC,EAAE,MAAM,GAAG,EAG/H,MACF,OACOE,EAAK,CACVV,EAAQ,IAAI,MAAMU,CAAG,CACvB,CAGA,OAAOX,CACT,CAEA,eAAsBY,EACpBZ,EACAM,EACAC,EACAC,EACAP,EACA,CAKA,GAAI,CAGF,IAAMQ,GAFS,MAAMV,EAAmBC,EAAMC,CAAO,GAE3B,eAAe,OAAOS,GAAQA,EAAK,SAAW,MAAM,EAE9E,GAAID,EAAW,SAAW,EACxB,OAAOT,EAGTM,EAAO,KAAK,2DAA2DG,EAAW,CAAC,EAAE,OAAO,WAAWA,EAAW,CAAC,EAAE,MAAM,GAAG,EAG9H,MACF,OACOE,EAAK,CACVV,EAAQ,IAAI,MAAMU,CAAG,CACvB,CAGA,OAAOX,CACT",
  "names": ["checkFirewallForAi", "data", "context", "aiFirewallResponse", "environment", "responseText", "inboundFirewallPolicy", "target", "source", "request", "shouldDeny", "rule", "err", "outboundFirewallPolicy"]
}
