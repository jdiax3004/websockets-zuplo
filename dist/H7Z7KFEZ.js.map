{
  "version": 3,
  "sources": ["../modules/ws-inbound-firewall.ts"],
  "sourcesContent": ["import { environment, ZuploContext, ZuploRequest } from \"@zuplo/runtime\";\n\ninterface TriggeredRule {\n  ruleId: string;\n  version: string;\n  tags: string[];\n  message: string;\n  category: string;\n  riskScore: number;\n  details: { maskedInput: string };\n  action: \"deny\" | \"alert\";\n  selector: string;\n}\n\ninterface AIFirewallResponse {\n  overallRiskScore: number;\n  rulesTriggered: TriggeredRule[];\n  userApplicationId: string;\n  clientRequestId: string;\n}\n\ntype DetectMode = \"input\" | \"output\";\n\nasync function detectWithAiFirewall(\n  data: string,\n  context: ZuploContext,\n  mode: DetectMode\n): Promise<AIFirewallResponse> {\n  const payload =\n    mode === \"input\"\n      ? { clientRequestId: crypto.randomUUID(), llmInput: data }\n      : { clientRequestId: crypto.randomUUID(), llmOutput: data };\n\n  const url = `https://aisec.akamai.com/fai/v1/fai-configurations/${environment.AI_FIREWALL_CONFIG_ID}/detect`;\n\n  const res = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Fai-Api-Key\": environment.AI_FIREWALL_KEY,\n    },\n    body: JSON.stringify(payload),\n  });\n\n  const text = await res.text();\n\n  // Debug\n  context.log.debug({\n    detectMode: mode,\n    url,\n    status: res.status,\n    statusText: res.statusText,\n    responseBody: text,\n  });\n\n  if (!res.ok) {\n    throw new Error(\n      `FAI detect failed (${mode}). HTTP ${res.status} ${res.statusText} \u2014 ${text?.slice(0, 500)}`\n    );\n  }\n\n  return JSON.parse(text) as AIFirewallResponse;\n}\n\nfunction mustBeString(data: any): string {\n  if (typeof data === \"string\") return data;\n  if (data instanceof Uint8Array) return new TextDecoder().decode(data);\n  return String(data);\n}\n\nexport async function inboundFirewallPolicy(\n  data: any,\n  target: WebSocket,\n  source: WebSocket,\n  request: ZuploRequest,\n  context: ZuploContext\n) {\n  try {\n    const s = mustBeString(data);\n    const result = await detectWithAiFirewall(s, context, \"input\");\n\n    const denies = result.rulesTriggered.filter(r => r.action === \"deny\");\n    if (denies.length === 0) return data;\n\n    source.send(\n      `Firewall for AI denied inbound message: ${denies[0].message} (Rule: ${denies[0].ruleId})`\n    );\n    return;\n  } catch (err) {\n    context.log.error({ err, phase: \"inbound\" });\n  }\n  return data;\n}\n\nexport async function outboundFirewallPolicy(\n  data: any,\n  target: WebSocket,\n  source: WebSocket,\n  request: ZuploRequest,\n  context: ZuploContext\n) {\n  try {\n    const s = mustBeString(data);\n    const result = await detectWithAiFirewall(s, context, \"output\");\n\n    const denies = result.rulesTriggered.filter(r => r.action === \"deny\");\n    if (denies.length === 0) return data;\n\n    target.send(\n      `Firewall for AI denied outbound message: ${denies[0].message} (Rule: ${denies[0].ruleId})`\n    );\n    return;\n  } catch (err) {\n    context.log.error({ err, phase: \"outbound\" });\n  }\n  return data; \n}\n"],
  "mappings": "kCAuBA,eAAeA,EACbC,EACAC,EACAC,EAC6B,CAC7B,IAAMC,EACJD,IAAS,QACL,CAAE,gBAAiB,OAAO,WAAW,EAAG,SAAUF,CAAK,EACvD,CAAE,gBAAiB,OAAO,WAAW,EAAG,UAAWA,CAAK,EAExDI,EAAM,sDAAsDC,EAAY,qBAAqB,UAE7FC,EAAM,MAAM,MAAMF,EAAK,CAC3B,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAeC,EAAY,eAC7B,EACA,KAAM,KAAK,UAAUF,CAAO,CAC9B,CAAC,EAEKI,EAAO,MAAMD,EAAI,KAAK,EAW5B,GARAL,EAAQ,IAAI,MAAM,CAChB,WAAYC,EACZ,IAAAE,EACA,OAAQE,EAAI,OACZ,WAAYA,EAAI,WAChB,aAAcC,CAChB,CAAC,EAEG,CAACD,EAAI,GACP,MAAM,IAAI,MACR,sBAAsBJ,CAAI,WAAWI,EAAI,MAAM,IAAIA,EAAI,UAAU,WAAMC,GAAM,MAAM,EAAG,GAAG,CAAC,EAC5F,EAGF,OAAO,KAAK,MAAMA,CAAI,CACxB,CAEA,SAASC,EAAaR,EAAmB,CACvC,OAAI,OAAOA,GAAS,SAAiBA,EACjCA,aAAgB,WAAmB,IAAI,YAAY,EAAE,OAAOA,CAAI,EAC7D,OAAOA,CAAI,CACpB,CAEA,eAAsBS,EACpBT,EACAU,EACAC,EACAC,EACAX,EACA,CACA,GAAI,CACF,IAAMY,EAAIL,EAAaR,CAAI,EAGrBc,GAFS,MAAMf,EAAqBc,EAAGZ,EAAS,OAAO,GAEvC,eAAe,OAAOc,GAAKA,EAAE,SAAW,MAAM,EACpE,GAAID,EAAO,SAAW,EAAG,OAAOd,EAEhCW,EAAO,KACL,2CAA2CG,EAAO,CAAC,EAAE,OAAO,WAAWA,EAAO,CAAC,EAAE,MAAM,GACzF,EACA,MACF,OAASE,EAAK,CACZf,EAAQ,IAAI,MAAM,CAAE,IAAAe,EAAK,MAAO,SAAU,CAAC,CAC7C,CACA,OAAOhB,CACT,CAEA,eAAsBiB,EACpBjB,EACAU,EACAC,EACAC,EACAX,EACA,CACA,GAAI,CACF,IAAMY,EAAIL,EAAaR,CAAI,EAGrBc,GAFS,MAAMf,EAAqBc,EAAGZ,EAAS,QAAQ,GAExC,eAAe,OAAOc,GAAKA,EAAE,SAAW,MAAM,EACpE,GAAID,EAAO,SAAW,EAAG,OAAOd,EAEhCU,EAAO,KACL,4CAA4CI,EAAO,CAAC,EAAE,OAAO,WAAWA,EAAO,CAAC,EAAE,MAAM,GAC1F,EACA,MACF,OAASE,EAAK,CACZf,EAAQ,IAAI,MAAM,CAAE,IAAAe,EAAK,MAAO,UAAW,CAAC,CAC9C,CACA,OAAOhB,CACT",
  "names": ["detectWithAiFirewall", "data", "context", "mode", "payload", "url", "environment", "res", "text", "mustBeString", "inboundFirewallPolicy", "target", "source", "request", "s", "denies", "r", "err", "outboundFirewallPolicy"]
}
